// 构建脚本
buildscript {

    //你可以看看几个国内存储库，我们国内开发环境下载速度最快还行
    // 存储库
    repositories {
        // 那是做叫 中央存储库， 绝大多数具备 Gradle项目 都离不开 mavenCentral（中央存储库）
        mavenCentral()
        // 借用 阿里云 存储库，那是国内存储库, central 仓库 和 jcenter 仓库 合并的
        maven {
            name = "aliyun"
            url "https://maven.aliyun.com/repository/public/"
        }
        // 龙眼 存储库，那是国内存储库，作者：beanflame（豆焰）电邮：beanflame@qq.com
        maven {
            name = "longan"
            url = "https://longan.beanflame.cn/maven"
        }
        // FORGE 存储库
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        // sonatype 存储库 Sonatype公司出资维护的，我们把它想象成是一个无比巨大，物产丰富的大库.....
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    // 依赖库
    dependencies {
        classpath ('cn.beanflame.forge:LonganForgeGradle:1.2-1.1.0') {
            changing = true
        }
    }
}


// 插件
plugins {
    id 'java-library'	// JAVA 依赖库
    id 'maven-publish'	// 上传 maven 存储库 功能
}


// JAVA 版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

// 加载 LonganForgeGradle 插件，那是 forge 有用的呢
apply plugin: 'forge'

// MOD 版本信息 , 别忘写版本信息
version = "0.7.10-BF-0.1.3-alpha-1"
group= "cubex2.cs3"
archivesBaseName = "CustomStuff3"


// minecraft（我的世界） Forge 版本、 MCP 版本
minecraft {

    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    // 最新的 MCP 版本是 stable_12 的 稳定版
    // mappings = "stable_12"

}



// 依赖库
dependencies {
	implementation "rhino:js:1.7R2"
}


// 添加资源
processResources {

    // 这将确保在版本更改时重新执行此任务
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // 仅替换 mcmod.info 中的值
    filesMatching('mcmod.info') {
        // 替换更新 version 和 mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

}



// 确保源文件的编码设置为UTF-8，
// 有什么关详细更多信息
// http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {

    options.encoding = "UTF-8"

}


//---------------------------------------------------------------------------------------------
//如果下面没用，就是可以去掉了

// 要认真发布MOD~~！






// 这将此任务创建一个.jar文件，其中包含此 MOD 的源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}


// 这将此任务将创建一个.jar文件，其中包含此mod的已取消订阅版本，供其他开发人员在开发环境中使用。
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}


// 在构建 MOD 时候，创建列出的工件
artifacts {
    archives sourcesJar
    archives devJar
}


// 这将此块配置要生成的任何 maven 存储库 发布
publishing {
    publications {
        mavenJava(MavenPublication) {
            // 在这里添加您要发布 MOD 的任何其他工件！
            artifact(jar) {
                builtBy build
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
            artifact(devJar) {
                builtBy devJar
            }
        }
    }

    // 这将此块选择要发布 MOD 添加放到 maven 存储库。
    repositories {
        // 这将在此处添加要发布 MOD 添加放到 maven 存储库
    }
}








//---------------------------------------------------------------------------------------------
